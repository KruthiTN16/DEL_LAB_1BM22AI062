import matplotlib.pyplot as plt
from keras.datasets import imdb
from keras import Sequential
from keras.layers import Dense, SimpleRNN, Embedding
from keras.preprocessing.sequence import pad_sequences

# 1. Load the IMDB dataset
max_features = 10000  # Use the top 10,000 words
max_len = 500  # Limit review length to 500 words

# Load data: The data is already preprocessed with integer-encoded words.
(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=max_features)

# 2. Preprocess the data (Pad sequences to ensure uniform length)
x_train = pad_sequences(x_train, maxlen=max_len)
x_test = pad_sequences(x_test, maxlen=max_len)

# 3. Define the Simple RNN model
model = Sequential()
# Embedding layer to convert word indices into dense vectors
model.add(Embedding(input_dim=max_features, output_dim=128, input_length=max_len))
# Simple RNN layer
model.add(SimpleRNN(128))
# Output layer for binary classification (positive or negative review)
model.add(Dense(1, activation='sigmoid'))

# 4. Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# 5. Train the model and store the history
history = model.fit(x_train, y_train, batch_size=64, epochs=5, validation_data=(x_test, y_test))

# 6. Evaluate the model
score = model.evaluate(x_test, y_test, batch_size=64)
print(f"Test loss: {score[0]}")
print(f"Test accuracy: {score[1]}")

# 7. Plot the training and validation loss and accuracy
plt.figure(figsize=(12, 4))

# Plotting Loss
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

# Plotting Accuracy
plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

# Show the plots
plt.tight_layout()
plt.show()
