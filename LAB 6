import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms
from torch.utils.data import DataLoader

# Hyperparameters
batch_size = 64
learning_rate = 0.01
epochs = 10
epsilon = 0.1  # Perturbation strength for adversarial training

# Device configuration
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Data loading
transform = transforms.Compose([transforms.ToTensor()])
train_dataset = datasets.MNIST(root='./data', train=True, download=True, transform=transform)
test_dataset = datasets.MNIST(root='./data', train=False, download=True, transform=transform)
train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

# Simple CNN model
class SimpleCNN(nn.Module):
    def __init__(self):
        super(SimpleCNN, self).__init__()
        self.conv = nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1)
        self.relu = nn.ReLU()
        self.pool = nn.MaxPool2d(2)
        self.fc = nn.Linear(32 * 14 * 14, 10)
    
    def forward(self, x):
        x = self.pool(self.relu(self.conv(x)))
        x = x.view(x.size(0), -1)
        x = self.fc(x)
        return x

model = SimpleCNN().to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=learning_rate)

# Adversarial attack function
def fgsm_attack(model, images, labels, epsilon):
    images.requires_grad = True
    outputs = model(images)
    loss = criterion(outputs, labels)
    model.zero_grad()
    loss.backward()
    data_grad = images.grad.data
    perturbed_images = images + epsilon * data_grad.sign()
    perturbed_images = torch.clamp(perturbed_images, 0, 1)  # Ensure valid pixel range
    return perturbed_images

# Training function
def train(model, loader, optimizer, adversarial_training=False):
    model.train()
    total_loss, correct = 0, 0
    for images, labels in loader:
        images, labels = images.to(device), labels.to(device)
        
        # Generate adversarial examples if adversarial training is enabled
        if adversarial_training:
            images = fgsm_attack(model, images, labels, epsilon)
        
        outputs = model(images)
        loss = criterion(outputs, labels)
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        
        total_loss += loss.item()
        correct += (outputs.argmax(1) == labels).sum().item()
    
    print(f"Train Loss: {total_loss / len(loader):.4f}, Accuracy: {correct / len(loader.dataset):.4f}")

# Evaluation function
def evaluate(model, loader):
    model.eval()
    total_loss, correct = 0, 0
    with torch.no_grad():
        for images, labels in loader:
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            loss = criterion(outputs, labels)
            total_loss += loss.item()
            correct += (outputs.argmax(1) == labels).sum().item()
    
    print(f"Test Loss: {total_loss / len(loader):.4f}, Accuracy: {correct / len(loader.dataset):.4f}")

# Training loop
for epoch in range(epochs):
    print(f"Epoch {epoch + 1}/{epochs}")
    train(model, train_loader, optimizer, adversarial_training=True)
    evaluate(model, test_loader)

# Tangent Propagation (optional, illustrative)
def tangent_propagation_loss(model, images, labels, criterion):
    tangent_loss = 0
    for image, label in zip(images, labels):
        # Generate small perturbations simulating transformations (e.g., rotation, translation)
        perturbations = torch.randn_like(image) * 0.01
        perturbed_image = image + perturbations
        perturbed_image = torch.clamp(perturbed_image, 0, 1)

        # Compute loss between original and perturbed outputs
        output_original = model(image.unsqueeze(0))
        output_perturbed = model(perturbed_image.unsqueeze(0))
        tangent_loss += torch.mean((output_original - output_perturbed) ** 2)
    
    return tangent_loss / len(images)

# Incorporate tangent propagation loss in training
# Add this loss term in the `train` function.
